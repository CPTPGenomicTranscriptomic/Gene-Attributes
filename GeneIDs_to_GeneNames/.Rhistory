z
library(shiny)
ui <- fluidPage(
titlePanel("Convert gene names to Gene ids", windowTitle = "Aarthi"),
fileInput("file", "Please Upload a mapping table"),
verbatimTextOutput("text"),
fileInput("filetwo", "Please Upload a gene list"),
verbatimTextOutput("texttwo"),
h3("The gene IDs corresponding to the gene names are as follows:"),
verbatimTextOutput("textthree")
)
server <- function(input, output, session) {
output$text <- renderText({
filePath <- input$file$datapath
fileText <- readLines(filePath)
fileText <- paste(fileText, collapse = "\n")
})
output$texttwo <- renderText({
filePath <- input$filetwo$datapath
fileText <- read.table(filePath, sep = "\t")
fileText <- fileText$V1
fileText <- paste(fileText, collapse = "\n")
})
tempdata <- read.table("mapping.txt")
tempdata2 <- read.table("genes.txt")
rownames(tempdata) <- tempdata$V2
rownames(tempdata2) <- tempdata2$V1
fileText <- tempdata[rownames(tempdata2),]
output$textthree <- renderText({
fileText <- paste(fileText$V1, collapse = "\n")
})
}
shinyApp(ui = ui, server = server) # last line
library(shiny)
ui <- fluidPage(
titlePanel("Convert gene names to Gene ids", windowTitle = "Aarthi"),
fileInput("file", "Please Upload a mapping table"),
verbatimTextOutput("text"),
fileInput("filetwo", "Please Upload a gene list"),
verbatimTextOutput("texttwo"),
h3("The gene IDs corresponding to the gene names are as follows:"),
verbatimTextOutput("textthree")
)
server <- function(input, output, session) {
output$text <- renderText({
filePath <- input$file$datapath
fileText <- readLines(filePath)
fileText <- paste(fileText, collapse = "\n")
})
output$texttwo <- renderText({
filePath <- input$filetwo$datapath
fileText <- read.table(filePath, sep = "\t")
fileText <- fileText$V1
fileText <- paste(fileText, collapse = "\n")
})
tempdata <- read.table(input$file$datapath)
tempdata2 <- read.table(input$filetwo$datapath)
rownames(tempdata) <- tempdata$V2
rownames(tempdata2) <- tempdata2$V1
fileText <- tempdata[rownames(tempdata2),]
output$textthree <- renderText({
fileText <- paste(fileText$V1, collapse = "\n")
})
}
shinyApp(ui = ui, server = server) # last line
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("Convert gene names to Gene ids", windowTitle = "Aarthi"),
fileInput("file", "Please Upload a mapping table"),
verbatimTextOutput("text"),
fileInput("filetwo", "Please Upload a gene list"),
verbatimTextOutput("texttwo"),
h3("The gene IDs corresponding to the gene names are as follows:"),
verbatimTextOutput("textthree")
)
server <- function(input, output, session) {
output$text <- renderText({
filePath <- input$file$datapath
fileText <- readLines(filePath)
fileText <- paste(fileText, collapse = "\n")
})
output$texttwo <- renderText({
filePath <- input$filetwo$datapath
fileText <- read.table(filePath, sep = "\t")
fileText <- fileText$V1
fileText <- paste(fileText, collapse = "\n")
})
tempdata <- read.table("mapping.txt")
tempdata2 <- read.table("genes.txt")
rownames(tempdata) <- tempdata$V2
rownames(tempdata2) <- tempdata2$V1
fileText <- tempdata[rownames(tempdata2),]
output$textthree <- renderText({
fileText <- paste(fileText$V1, collapse = "\n")
})
}
shinyApp(ui = ui, server = server) # last line
runApp()
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("Convert gene names to Gene ids", windowTitle = "Aarthi"),
fileInput("file", "Please Upload a mapping table"),
verbatimTextOutput("text"),
fileInput("filetwo", "Please Upload a gene list"),
verbatimTextOutput("texttwo"),
h3("The gene IDs corresponding to the gene names are as follows:"),
verbatimTextOutput("textthree")
)
server <- function(input, output, session) {
output$text <- renderText({
filePath <- input$file$datapath
fileText <- readLines(filePath)
fileText <- paste(fileText, collapse = "\n")
})
output$texttwo <- renderText({
filePath <- input$filetwo$datapath
fileText <- read.table(filePath, sep = "\t")
fileText <- fileText$V1
fileText <- paste(fileText, collapse = "\n")
})
tempdata <- read.table("mapping.txt")
tempdata2 <- read.table("genes.txt")
rownames(tempdata) <- tempdata$V2
rownames(tempdata2) <- tempdata2$V1
fileText <- tempdata[rownames(tempdata2),]
output$textthree <- renderText({
fileText <- paste(fileText$V1, collapse = "\n")
})
}
shinyApp(ui = ui, server = server) # last line
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fileText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
data1 <- read.table("mapping.txt", stringsAsFactors = F)
head(data1)
data1 <- read.table("mapping_ian.txt", stringsAsFactors = F)
head(data1)
data1 <- read.table("mapping.txt", stringsAsFactors = F)
data1
data2 <- read.table("genes.txt", stringsAsFactors = F)
data2
data1[data2$V1]
data1$V2 %in% data2$V1
data1[data1$V2 %in% data2$V1,]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?titlePanel
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='aartrama',
token='E6E56EA7EA2E8CA5E67ED0AE37D2475E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='aartrama',
token='E6E56EA7EA2E8CA5E67ED0AE37D2475E',
secret='ujD/IBpYcNg3guYTmxJqRYzwKmDRN84wTsLvIass')
getwd()
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
getOption("repos")
bioc
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
bioc
getOption("repos")
deployApp()
deployApp()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
deployApp()
getOption("repos")
repos="http://www.bioconductor.org")
repos="http://www.bioconductor.org"
repos
getOption("repos")
devtools::install_github('rstudio/shinyapps')
options(shinyapps.locale.cache=FALSE)
shinyapps:::systemLocale()
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/rsconnect')
options(shinyapps.locale.cache=FALSE)
shinyapps:::systemLocale()
rconnect:::systemLocale()
rsconnect:::systemLocale()
rsconnect::appDependencies()
devtools::session_info()
deployApp()
deployApp()
deployApp()
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
deployApp()
deployApp()
